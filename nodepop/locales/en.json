{
	"Welcome To": "Welcome To",
	"Welcome to": "Welcome to",
	"Home": "Home",
	"Advertisements": "Advertisements",
	"Login": "Login",
	"Page-Example": "Page-Example",
	"Advertisements List": "Advertisements List",
	"ID": "ID",
	"Product Name": "Product Name",
	"Sale": "Sale",
	"Price": "Price",
	"Tags": "Tags",
	"Photo": "Photo",
	"Tag Filter": "Tag Filter",
	"Price Filter": "Price Filter",
	"Name Filter": "Name Filter",
	"Descendent Filter": "Descendent Filter",
	"Pagination": "Pagination",
	"Sale Filter": "Sale Filter",
	"Various Filter": "Various Filter",
	"New Ads": "New Ads",
	"Yes": "Yes",
	"No": "No",
	"Thumb": "Thumb",
	"Nodepop es una Api que nos sirve un listado de anuncios de segunda manos para la compra o la venta de art√≠culos.": "Nodepop is an Api that serves us a list of second-hand ads for the purchase or sale of items.",
	"Esta montado sobre una Base de datos de MongoDB. La app nos permite crear anuncios, borrarlos y filtrarlos por varios criterios introducidos en la url.": "It is mounted on a MongoDB Database. The app allows us to create ads, delete them and filter them by various criteria entered in the url.",
	"How to Install": "How to Install",
	"Clonar repositorio": "Clone Repositori",
	"File configuration .env": "File configuration .env",
	"Once the content has been copied and the .env file has been created, we put the name of the Database that we are going to create & secret private.": "Once the content has been copied and the .env file has been created, we put the name of the Database that we are going to create & secret private.",
	"Initialize test database": "Initialize test database",
	"This command will allow us to create a test database with the collections created as an example.": "This command will allow us to create a test database with the collections created as an example.",
	"Attention this script deletes the database should only be used in the first deployment of the application.": "Attention this script deletes the database should only be used in the first deployment of the application.",
	"Initialize Microservices": "Initialize Microservices",
	"Optional this only starts the microservice but does not start the app": "Optional this only starts the microservice but does not start the app",
	"Initialize App": "Initialize App",
	"This script first initializes the microservice and then the app": "This script first initializes the microservice and then the app",
	"API Methods": "API Methods",
	"From Postman we make an http request and in the body we collect the email and the pass.\nIf we put a valid email and pass, it will return a token.": "From Postman we make an http request and in the body we collect the email and the pass.If we put a valid email and pass, it will return a token.",
	"It requires a valid Token.We have to put the Token in headers {Authorize: Token valid when logging in}. If it is correct, the token will respond with a JSON of the ads": "It requires a valid Token.We have to put the Token in headers {Authorize: Token valid when logging in}. If it is correct, the token will respond with a JSON of the ads",
	"From Postman we make an http request and in the body we collect the email and the pass. If we put a valid email and pass, it will return a token.": "From Postman we make an http request and in the body we collect the email and the pass. If we put a valid email and pass, it will return a token.",
	"It requires a valid Token.We have to put the Token in headers {Authorize: Token valid when logging in}.": "It requires a valid Token.We have to put the Token in headers {Authorize: Token valid when logging in}.",
	"In the body we must put the following (The image must be selected as a file).": "In the body we must put the following (The image must be selected as a file).",
	"If it is correct, the token will respond with a JSON of the ads": "If it is correct, the token will respond with a JSON of the ads",
	"More information click here": "More information click here"
}